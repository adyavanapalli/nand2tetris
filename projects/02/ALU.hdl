// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   And16(a = x, b = false, out = zero);
   Not16(in = x, out = notx);
   Not16(in = y, out = noty);
   Not16(in[0..15] = false, out = neg1);

   Mux4Way16(a = x, b = zero, c = notx, d = neg1, sel[0] = zx, sel[1] = nx, out = r1);
   Mux4Way16(a = y, b = zero, c = noty, d = neg1, sel[0] = zy, sel[1] = ny, out = r2);

   And16(a = r1, b = r2, out = r1ANDr2);
   Add16(a = r1, b = r2, out = r1ADDr2);
   Not16(in = r1ANDr2, out = nr1ANDr2);
   Not16(in = r1ADDr2, out = nr1ADDr2);

   Mux4Way16(a = r1ANDr2, b = r1ADDr2, c = nr1ANDr2, d = nr1ADDr2, sel[0] = f, sel[1] = no, out = check, out = out);
   Or16Way(in = check, out = nzr);
   Not(in = nzr, out = zr);

   And16(a = check, b[0..14] = false, b[15] = true, out = checkMask15bit);
   Or16Way(in = checkMask15bit, out = ng);
}